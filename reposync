#!/bin/sh

# -----------------------------
# @Author: Michael Arnold
# @Contact: me@michaelarnold.io
# -----------------------------

unclean_repos=""
DIR="./.git"
TMP="../tmp"

function check_directory() {
  if [ -d "$DIR" ]; then
    echo "ERROR: CANNOT RUN THIS COMMAND INSIDE A GIT DIRECTORY"
    echo "HINT: TRY RUNNING THIS IN THE PARENT DIRECTORY"
    exit 1
  fi
}

function sync() {
  echo "ABOUT TO SYNC REPO: $i"
  git pull --rebase &> /dev/null || exit_on_error "$1"
  git push &> /dev/null || exit_on_error "$1"
  echo "SUCCESSFULLY SYNCED REPO: $i"
}

function add_unclean_repo() {
  echo "-----------------------------------------------------------------------"
  echo "ADDING UNCLEAN REPO: $1"
  echo "$1" >> "$TMP"
  echo "-----------------------------------------------------------------------"
}

function exit_on_error() {
  echo "-----------------------------------------------------------------------"
  echo "FAILED TO SYNC REPO: $1"
  exit 1
  echo "-----------------------------------------------------------------------"
}

function print_unclean_repos() {
  echo "======================================================================="
  if [ -f tmp ]; then
    echo "REPOS THAT HAVE UNCOMMITTED CHANGES:"
    while read line; do
      echo "  *  $line"
    done < tmp
    rm tmp
  fi
}

function main() {
  (for i in $(ls --color=none); do
    cd "$i" 
    if [ ! -d "$DIR" ]; then
      echo "WARN: $i is not a git repository"
      cd ..
      continue
    fi
    is_clean="$(git status | grep "nothing to commit, working tree clean")"

    # if there are uncommitted changes then we should not sync; else we sync
    if [ -z "$is_clean" ]; then
      add_unclean_repo "$i"
    else
      sync "$i" &
    fi
    cd ..
  done; wait) & all_proc=$!
  # wait until ALL background processes are done, needs a better solution
  wait $all_proc
  print_unclean_repos
}

check_directory
main
